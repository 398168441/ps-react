(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.index = global.index || {}, global.index.js = factory()));
})(this, (function () { 'use strict';

	//  创建Update
	const createUpdate = (action) => {
	    return {
	        action
	    };
	};
	//  创建updateQueue
	const createUpdateQueue = () => {
	    return {
	        shared: {
	            pending: null
	        }
	    };
	};
	//  往 updateQueue 里增加 update
	const enqueueUpdate = (updateQueue, update) => {
	    updateQueue.shared.pending = update;
	};
	//  消费update
	const processUpdateQueue = (baseState, pendingUpdate) => {
	    const result = {
	        memoizedState: baseState
	    };
	    if (pendingUpdate !== null) {
	        const action = pendingUpdate.action;
	        if (action instanceof Function) {
	            // baseState 1 update (x) => 4x -> memoizedState 4
	            result.memoizedState = action(baseState);
	        }
	        else {
	            // baseState 1 update 2 -> memoizedState 2
	            result.memoizedState = action;
	        }
	    }
	    return result;
	};

	const FunctionComponent = 0;
	const HostRoot = 3; // ReactDom.render(document.getElementById('root')) 中的根节点 root
	const HostComponent = 5; //	比如 <div> 对应的fiber 就是HostComponent
	const HostText = 6; // <div>123</div> 这个123的类型就是HostText

	const NoFlags = 0b0000000;
	const Placement = 0b0000001;
	const Update = 0b0000010;
	const ChildDeletion = 0b0000100;
	const MutationMask = Placement | Update | ChildDeletion;

	class FiberNode {
	    type;
	    tag;
	    pendingProps;
	    key;
	    stateNode;
	    ref;
	    return;
	    sibling;
	    child;
	    index;
	    memoizedProps;
	    memoizedState;
	    alternate;
	    flags;
	    subtreeFlags;
	    updateQueue;
	    constructor(tag, pendingProps, key) {
	        //	实例
	        this.tag = tag;
	        this.key = key;
	        //	比如一个HostComponent <div> stageNode保存的就是这个div对应的Dom
	        this.stateNode = null;
	        // 对于 <App /> FunctionComponent Fiber 他的type就是 <App />
	        this.type = null;
	        //	节点之间的关系 构成树状结构
	        this.return = null; //指向父fiberNode
	        this.sibling = null; //	右边的兄弟fiberNode
	        this.child = null; // 子fiberNode
	        this.index = 0; // 比如 <ul>li*3</ul> 中 第一个li的index就是0
	        this.ref = null;
	        //	作为工作单元
	        this.pendingProps = pendingProps; //	工作开始时的props
	        this.memoizedProps = null; //	工作完成后的props
	        this.memoizedState = null;
	        this.updateQueue = null;
	        this.alternate = null; //	current <-> workInProgress
	        //	副作用
	        this.flags = NoFlags;
	        this.subtreeFlags = NoFlags;
	    }
	}
	/**
	 * 定义整个根Fiber
	 *
	 * FiberRootNode  -current->  hostRootFiber
	 * hostRootFiber -stateNode-> FiberRootNode
	 *
	 * hostRootFiber -child->  App Fiber
	 * App Fiber     -return-> hostRootFiber
	 */
	class FiberRootNode {
	    container;
	    current;
	    finishedWork; //	指向更新完成以后的【hostRootFiber】
	    constructor(container, hostRootFiber) {
	        this.container = container;
	        this.current = hostRootFiber;
	        hostRootFiber.stateNode = this;
	        this.finishedWork = null;
	    }
	}
	//	创建workInProgress
	function createWorkInProgress(current, pendingProps) {
	    let wip = current.alternate;
	    if (wip === null) {
	        //	mount 阶段
	        wip = new FiberNode(current.tag, pendingProps, current.key);
	        wip.stateNode = current.stateNode;
	        wip.alternate = current;
	        current.alternate = wip;
	    }
	    else {
	        //	update 阶段
	        wip.pendingProps = pendingProps;
	        wip.flags = NoFlags; //	清除之前的副作用
	    }
	    //	复用current
	    wip.type = current.type;
	    wip.updateQueue = current.updateQueue;
	    wip.child = current.child;
	    wip.memoizedProps = current.memoizedProps;
	    wip.memoizedState = current.memoizedState;
	    return wip;
	}
	//	根据element创建一个Fiber
	function createFiberFromElement(element) {
	    const { type, key, props } = element;
	    let fiberTag = FunctionComponent;
	    // 比如<div>xxx</div>这种 typeof就是 'div' 的string
	    if (typeof type === 'string') {
	        fiberTag = HostComponent;
	    }
	    else if (typeof type !== 'function' && true) {
	        console.warn('为定义的type类型', element);
	    }
	    const fiber = new FiberNode(fiberTag, props, key);
	    fiber.type = type;
	    return fiber;
	}

	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	function ChildReconciler(shouldTrackEffects) {
	    // 创建单个节点的 Fiber
	    function reconcileSingleElement(returnFiber, currentFiber, newChild) {
	        // 根据element创建一个Fiber
	        const fiber = createFiberFromElement(newChild);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    //  创建单个文本节点的Fiber
	    function reconcileSingleTextNode(returnFiber, currentFiber, content) {
	        const fiber = new FiberNode(HostText, { content }, null);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    //  插入单一节点
	    function placeSingleChild(fiber) {
	        //  应该追踪副作用且首屏渲染
	        if (shouldTrackEffects && fiber.alternate === null) {
	            fiber.flags |= Placement;
	        }
	        return fiber;
	    }
	    return function (returnFiber, currentFiber, newChild) {
	        //  判断当前需要创建的fiber的类型
	        //  1、REACT_ELEMENT_TYPE
	        if (typeof newChild === 'object' && newChild !== null) {
	            switch (newChild.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFiber, newChild));
	                default:
	                    {
	                        console.warn('未实现的reconcile类型', newChild);
	                    }
	                    break;
	            }
	        }
	        //  2、多节点 ul>li*3
	        // 3、文本节点
	        if (typeof newChild === 'string' || typeof newChild === 'number') {
	            //
	            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFiber, newChild));
	        }
	        {
	            console.warn('未实现的reconcile类型', newChild);
	        }
	        return null;
	    };
	}
	const reconcileChildFibers = ChildReconciler(true);
	const mountChildFibers = ChildReconciler(false);

	function renderWithHooks(wip) {
	    const Component = wip.type;
	    const props = wip.pendingProps;
	    const children = Component(props);
	    return children;
	}

	//  递归中的递阶段
	const beginWork = (wip) => {
	    //  比较ReactElement和fiberNode，返回子fiberNode
	    switch (wip.tag) {
	        case HostRoot:
	            return updateHostRoot(wip);
	        case HostComponent:
	            return updateHostComponent(wip);
	        case HostText:
	            /**
	             * <div>唱跳rap篮球</div>
	             * 这个{唱跳rap篮球} HostText 没有子节点
	             * 所以直接return null 开始completeWork
	             */
	            return null;
	        case FunctionComponent:
	            return updateFunctionComponent(wip);
	        default:
	            {
	                console.warn('beginWork未实现的类型');
	            }
	            break;
	    }
	    return null;
	};
	function updateFunctionComponent(wip) {
	    const nextChildren = renderWithHooks(wip);
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	/**
	 * HostRoot的beginWork流程
	 * 1、计算状态的最新值
	 * 2、创造子FiberNode
	 */
	function updateHostRoot(wip) {
	    const baseState = wip.memoizedState;
	    const updateQueue = wip.updateQueue;
	    const pending = updateQueue.shared.pending;
	    // 拿出来计算后把updateQueue置为null
	    updateQueue.shared.pending = null;
	    //	1、这里返回的memoizedState其实就是<App/>这个element
	    const { memoizedState } = processUpdateQueue(baseState, pending);
	    wip.memoizedState = memoizedState;
	    //	2、所以nextChildren就是wip.memoizedState
	    const nextChildren = wip.memoizedState;
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	/**
	 * HostComponent不像HostRoot，是没办法触发更新的
	 * HostComponent 的beginWork工作流程
	 * 1、创建子FiberNode
	 */
	function updateHostComponent(wip) {
	    /**
	     * 比如<div><span>123</span></div> 这个span就是 div HostComponent 的{chidren}
	     * 这个 {childrend} 就是props里
	     *  */
	    const nextChildren = wip.pendingProps.children;
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	//	返回子FiberNode
	function reconcileChildren(wip, children) {
	    const current = wip.alternate;
	    /**
	     * 对于HostRoot在renderRoot的初始化时createWorkInProgress中
	     * 已经为HostRoot的wip.alernate赋值root.current
	     * 所以整个mount阶段只会为HostRoot插入Placement
	     * HostRoot往下每一个节点不会插入Placement副作用
	     * 这样就可以构建好「离屏DOM树」后，对<App/>执行1次Placement操作
	     * */
	    if (current !== null) {
	        //	update
	        wip.child = reconcileChildFibers(wip, current.child, children);
	    }
	    else {
	        //	mount
	        wip.child = mountChildFibers(wip, null, children);
	    }
	}

	/**
	 * 描述宿主环境的文件
	 */
	// 创建dom实例
	// export const createInstance = (type: string, props: any): Instance => {
	const createInstance = (type) => {
	    // todo props
	    const element = document.createElement(type);
	    return element;
	};
	// appendChild
	const appendInitialChild = (parent, child) => {
	    parent.appendChild(child);
	};
	// 创建文本节点
	const createTextInstance = (content) => {
	    return document.createTextNode(content);
	};
	const appendChildToContainer = appendInitialChild;

	const completeWork = (wip) => {
	    const newProps = wip.pendingProps;
	    const current = wip.alternate;
	    switch (wip.tag) {
	        case HostComponent:
	            if (current !== null && wip.stateNode) ;
	            else {
	                // 1、构建DOM
	                // const instance = createInstance(wip.type, newProps)
	                const instance = createInstance(wip.type);
	                // 2、将DOM插入DOM树中
	                appendAllChildren(instance, wip);
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        case HostText:
	            if (current !== null && wip.stateNode) ;
	            else {
	                // 1、构建DOM
	                // const instance = createTextInstance(wip.type, newProps)
	                const instance = createTextInstance(newProps.content);
	                // 2、文本节点没有子节点，不需要执行append操作
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        case HostRoot:
	            bubbleProperties(wip);
	            return null;
	        case FunctionComponent:
	            bubbleProperties(wip);
	            return null;
	        default:
	            {
	                console.warn('未处理的completeWork情况', wip);
	            }
	            break;
	    }
	};
	function appendAllChildren(parent, wip) {
	    // 从wip的child开始挂载
	    let node = wip.child;
	    while (node !== null) {
	        //	只有 HostComponent 和 HostText 对应的DOM节点才是真正的DOM，才执行插入
	        if (node.tag === HostComponent || node.tag === HostText) {
	            appendInitialChild(parent, node.stateNode);
	        }
	        else if (node.child !== null) {
	            // 往下找
	            node.child.return = node;
	            node = node.child;
	            continue;
	        }
	        if (node === wip) {
	            return;
	        }
	        // 遍历兄弟节点 兄弟节点没有了 就往上
	        while (node.sibling === null) {
	            if (node.return === null || node.return === wip) {
	                return;
	            }
	            node = node.return;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	}
	/**
	 * 将子Fiber的flags冒泡到父Fiber上
	 * 一直冒泡到到父Fiber
	 * 这样每一颗Fiber树 从根Fiber就能判断这颗树是否有增删改的flags
	 */
	function bubbleProperties(wip) {
	    let subtreeFlags = NoFlags;
	    let child = wip.child;
	    while (child !== null) {
	        subtreeFlags |= child.subtreeFlags;
	        subtreeFlags |= child.flags;
	        child.return = wip;
	        child = child.sibling;
	    }
	    wip.subtreeFlags |= subtreeFlags;
	}

	let nextEffect = null;
	function commitMutationEffects(finishedWork) {
	    nextEffect = finishedWork;
	    while (nextEffect !== null) {
	        // 向下遍历 一直找到没有subtreeFlags的节点结束 再往上遍历
	        const child = nextEffect.child;
	        if ((nextEffect.subtreeFlags & MutationMask) !== NoFlags &&
	            child !== null) {
	            //  存在MutationMask的subtreeFlags就赋值给nextEffect 继续往下
	            nextEffect = child;
	        }
	        else {
	            /**
	             * 要么到叶子节点了，要么不包含substreeFlags
	             * 但是可能存在flags
	             *  向上遍历 DFS 深度优先遍历
	             */
	            up: while (nextEffect !== null) {
	                commitMutaitonEffectsOnFiber(nextEffect);
	                const sibling = nextEffect.sibling;
	                if (sibling !== null) {
	                    nextEffect = sibling;
	                    break up;
	                }
	                nextEffect = nextEffect.return;
	            }
	        }
	    }
	}
	function commitMutaitonEffectsOnFiber(finishedWork) {
	    const flags = finishedWork.flags;
	    // 判断flags中包含Placement的副作用 则执行插入操作
	    if ((flags & Placement) !== NoFlags) {
	        commitPlacement(finishedWork);
	        finishedWork.flags &= ~Placement;
	    }
	    // flags 中 Update
	    // flags 中 ChildDeletion
	}
	function commitPlacement(finishedWork) {
	    {
	        console.warn('执行Placement操作', finishedWork);
	    }
	    // 1、找到parent DOM
	    const hostParent = getHostParent(finishedWork);
	    // 2、找到finishedWork 对应的DOM
	    if (hostParent !== null) {
	        appendPlacementNodeIntoContainer(finishedWork, hostParent);
	    }
	}
	// 往上找到一个 Host DOM
	function getHostParent(fiber) {
	    let parent = fiber.return;
	    while (parent) {
	        const parentTag = parent.tag;
	        if (parentTag === HostComponent) {
	            return parent.stateNode;
	        }
	        if (parentTag === HostRoot) {
	            // HostRoot 是一个FiberRootNode
	            // FiberRootNode 对应的DOM 存在于 container
	            return parent.stateNode.container;
	        }
	        parent = parent.return;
	    }
	    {
	        console.warn('未找到host parent');
	    }
	    return null;
	}
	/**
	 * 递归向下的过程
	 * 找到第一层Host 执行宿主环境的appendChild
	 * 还需要把找到的第一个Host它的sibling一起添加到传入的hostParent
	 */
	function appendPlacementNodeIntoContainer(finishedWork, hostParent) {
	    // 往下找到第一层 Host DOM
	    if (finishedWork.tag === HostComponent || finishedWork.tag === HostText) {
	        appendChildToContainer(hostParent, finishedWork.stateNode);
	        return;
	    }
	    const child = finishedWork.child;
	    if (child !== null) {
	        appendPlacementNodeIntoContainer(child, hostParent);
	        // 还需要把child 的sibling也一起append到hostParent
	        let sibling = child.sibling;
	        while (sibling !== null) {
	            appendPlacementNodeIntoContainer(sibling, hostParent);
	            sibling = sibling.sibling;
	        }
	    }
	}

	/**
	 * 完整的工作循环的文件
	 */
	// 先定义一个全局的指针，指向正在工作的fiberNode
	let workInProgress = null;
	// 把workInProgress指向第一个需要遍历的fiberNode
	function prepareFreshStack(root) {
	    workInProgress = createWorkInProgress(root.current, {});
	}
	// 调度功能
	function scheduleUpdateOnFiber(fiber) {
	    const root = markUpdateFromFiberToRoot(fiber);
	    //	从FiberRootNode开始调度
	    renderRoot(root);
	}
	/**
	 * 找到根节点
	 * 更新有几种方式
	 * 1、ReactDom.createRoot(rootElement).render(<App/>)
	 * 2、class Component this.setState
	 * 3、Function Component setState
	 * 第1种是从FiberRootNode开始
	 * 第2、3会从某一个节点开始
	 * 所以需要先从根据开始节点往上，找到根FiberRootNode
	 */
	function markUpdateFromFiberToRoot(fiber) {
	    let node = fiber;
	    let parent = node.return;
	    while (parent !== null) {
	        node = parent;
	        parent = node.return;
	    }
	    if (node.tag === HostRoot) {
	        return node.stateNode;
	    }
	    return null;
	}
	// 调度方法
	function renderRoot(root) {
	    // 1、初始化
	    prepareFreshStack(root);
	    // 2、执行递归的流程
	    do {
	        try {
	            workLoop();
	            break;
	        }
	        catch (error) {
	            {
	                console.warn('workLoop发生错误', error);
	            }
	            workInProgress = null;
	        }
	    } while (true);
	    // 执行workLoop后会得到一颗操作后的workInProgress Fiber树
	    const finishedWork = root.current.alternate;
	    root.finishedWork = finishedWork;
	    //	根据wip Fiber树和树中的flags 执行具体的DOM操作
	    commitRoot(root);
	}
	// 开启commit阶段
	function commitRoot(root) {
	    const finishedWork = root.finishedWork;
	    //	如果finishedWork没有，则不会执行commit阶段
	    if (finishedWork === null) {
	        return;
	    }
	    {
	        console.warn('commit阶段开始', finishedWork);
	    }
	    // 重置root中finishedWork
	    root.finishedWork = null;
	    // 判断是否存在3个子阶段需要执行的操作
	    // 判断root的subtreeFlags 和 root的flags 是否包含需要操作的flags
	    const subtreeHasEffect = (finishedWork.subtreeFlags & MutationMask) !== NoFlags;
	    const rootHasEffect = (finishedWork.flags & MutationMask) !== NoFlags;
	    if (subtreeHasEffect || rootHasEffect) {
	        // beforeMutation
	        // mutation
	        commitMutationEffects(finishedWork);
	        root.current = finishedWork;
	        // layout
	    }
	    else {
	        // 切换FiberRootNode的current指针
	        // current指向最新的workInProgress Fiber树
	        root.current = finishedWork;
	    }
	}
	//	调度的循环
	function workLoop() {
	    while (workInProgress !== null) {
	        performUnitOfWork(workInProgress);
	    }
	}
	//	执行工作单元
	function performUnitOfWork(fiber) {
	    //	next 是这个fiber的子fiber 或者没有就为null
	    const next = beginWork(fiber);
	    fiber.memoizedProps = fiber.pendingProps;
	    if (next === null) {
	        // 2、没有子节点就遍历兄弟节点
	        completeUnitOfWork(fiber);
	    }
	    else {
	        /**
	         *  1、有子节点，就遍历子节点
	         *  就把next赋值给workInProgress，继续执行workLoop，继续向下遍历
	         *  */
	        workInProgress = next;
	    }
	}
	function completeUnitOfWork(fiber) {
	    let node = fiber;
	    do {
	        completeWork(node);
	        //	执行完completeWork，只需要看sibling存不存在
	        const sibling = node.sibling;
	        //	如果sibling存在，就把sibling赋值给workInProgress，继续执行workLoop
	        if (sibling !== null) {
	            workInProgress = sibling;
	            return;
	        }
	        //	如果不存在兄弟节点，则把node.return赋值给node，继续执行do while循环，完成父节点的completeWork
	        node = node.return;
	        workInProgress = node;
	    } while (node !== null);
	}

	/**
	 * ReactDom.createRoot(rootElement).render(<App/>)
	 * createRoot 就会执行【createContainer】
	 * render 就会执行【updateContainer】
	 */
	//  执行createRoot 创建并返回【FiberRootNode】
	function createContainer(container) {
	    const hostRootFiber = new FiberNode(HostRoot, {}, null);
	    const root = new FiberRootNode(container, hostRootFiber);
	    hostRootFiber.updateQueue = createUpdateQueue();
	    return root;
	}
	//  执行render
	function updateContainer(element, root) {
	    const hostRootFiber = root.current;
	    const update = createUpdate(element);
	    enqueueUpdate(hostRootFiber.updateQueue, update);
	    // 调度
	    scheduleUpdateOnFiber(hostRootFiber);
	    return element;
	}

	// ReactDom.createRoot(rootElement).render(<App/>)
	const createRoot = (container) => {
	    const root = createContainer(container);
	    return {
	        render(element) {
	            updateContainer(element, root);
	        }
	    };
	};

	var ReactDom = /*#__PURE__*/Object.freeze({
		__proto__: null,
		createRoot: createRoot
	});

	return ReactDom;

}));
